<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:fieldtoolstringservice="services.fieldtoolstringservice.*"
			   xmlns:fieldinfoserviceservice="services.fieldinfoserviceservice.*"
			   width="600" height="450" backgroundColor="#23AAE2" borderVisible="false"
			   close="closeHandler(event)" fontSize="11"
			   implements="icd.mgmtview.api.IManagementView" title="{titleName}">
	<fx:Script>
		<![CDATA[
			import com.icd.fieldlogger.admin.tabSensor.sensorViewAll;
			import com.icd.fieldlogger.admin.tabSensor._sensorViewUsed;
			
			import flash.events.Event;
			
			import icd.mgmtview.api.constant.ManagementViewConst;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.IndexChangedEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.TextOperationEvent;
			
			import valueObjects.Allinfo_service;
			import valueObjects.Alltoolstring;
			import valueObjects.AlltoolstringAdvanced;


			
			[Bindable] private var MODE:int;
			[Bindable] private var titleName:String;
			[Bindable] private var checkSave:Boolean = true;
			[Bindable] public static var serviceVO:Allinfo_service = new Allinfo_service();
			
			public function onApplicationResize(event:Event):void{}
			protected function changeHandler():void{
				checkSave = false;
			}
			protected function closeHandler(event:CloseEvent):void{
				if(checkSave === true){
					PopUpManager.removePopUp(this);
				}else{
					Alert.show("Click Yes to save your changes", "Please confirm", Alert.YES | Alert.NO, this, AlertSaveClosed, null, Alert.YES);	
				}
			}
			protected function AlertSaveClosed(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					if(txtName.text !== ""){
						prepareSave();
					}if(txtName.text === ""){
						Alert.show('Please select "Name"','Fields with Asterisk (*)');
					}	
				}else if(eventObj.detail===Alert.NO) {
					PopUpManager.removePopUp(this);
				}
			}
			
			public function prepareview(mode:int, titleName:String, objVO:Object=null):void{
				this.title = titleName;
				this.MODE = mode;
				
				if(this.MODE === ManagementViewConst.MODE_ADD){
					serviceVO 					= new Allinfo_service;
					serviceVO.serviceID			= "SV" + new Date().valueOf().toString(); 
					serviceVO.service_active	= "1";
				}else if(this.MODE === ManagementViewConst.MODE_EDIT){
					serviceVO = objVO as Allinfo_service;
				}
				getAllField_toolstringAdvancedByServiceIDResult.token = fieldtoolstringService.getAllField_toolstringAdvancedByServiceID(serviceVO.serviceID);
			}
		
			[Bindable] private var arrToolString:ArrayCollection = new ArrayCollection();
			[Bindable] private var checkToolstring:String = "0";
			protected function getAllField_toolstringAdvancedByServiceIDResult_resultHandler(event:ResultEvent):void{
				arrToolString = event.result as ArrayCollection;
				if(arrToolString.length > 0){
					checkToolstring = "1";
				}else{
					checkToolstring = "0";
				}
			}
			
			protected function lbtnSave_clickHandler(event:MouseEvent):void{
				if(txtName.text !== ""){
					Alert.show('Please confirm!', 'Confirm Save', Alert.YES | Alert.NO, this, AlerSave, null, Alert.YES);
				}if(txtName.text === ""){
					Alert.show('Please select "Name"','Fields with Asterisk (*)');
				}	
			}
			protected function AlerSave(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					prepareSave();
				}
			}
			protected function prepareSave():void{
				var updateInfoProject:Allinfo_service 	= new Allinfo_service();
				updateInfoProject.serviceNo				= serviceVO.serviceNo;
				updateInfoProject.serviceID				= serviceVO.serviceID;
				updateInfoProject.service_name			= txtName.text;
				updateInfoProject.service_note			= txtNote.text;
				updateInfoProject.service_sensor		= checkToolstring;
				updateInfoProject.service_active		= chkActive.selected? "1":"0";
				if(this.MODE === ManagementViewConst.MODE_ADD){
					createField_infoserviceResult.token = fieldinfoserviceService.createField_infoservice(updateInfoProject);
				}else if(this.MODE === ManagementViewConst.MODE_EDIT){
					updateField_infoserviceResult.token = fieldinfoserviceService.updateField_infoservice(updateInfoProject);
				}
			}
			protected function infoserviceResult_resultHandler(event:ResultEvent):void{
				checkSave = true;
				this.closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			
			
			protected function lbtnAddTools_clickHandler(event:MouseEvent):void{
				var ttwdEdit:_toolstringFormEdit = new _toolstringFormEdit();
				ttwdEdit.prepareview(ManagementViewConst.MODE_ADD,"Create New Service");
				PopUpManager.addPopUp(ttwdEdit,this,true);
				//ttwdEdit.x = 10;
				//ttwdEdit.y = 10;
				PopUpManager.centerPopUp(ttwdEdit);
				ttwdEdit.isPopUp = true; 
				ttwdEdit.addEventListener(CloseEvent.CLOSE, alphaPopupCloseHandler);
			}
			
			public function alertEdit():void{
				var ttwdEdit:_toolstringFormEdit = new _toolstringFormEdit();
				ttwdEdit.prepareview(ManagementViewConst.MODE_EDIT,"Update Service", dgToolString.selectedItem as AlltoolstringAdvanced);
				PopUpManager.addPopUp(ttwdEdit,this,true);
				//ttwdEdit.x = 10;
				//ttwdEdit.y = 10;
				PopUpManager.centerPopUp(ttwdEdit);
				ttwdEdit.isPopUp = true; 
				ttwdEdit.addEventListener(CloseEvent.CLOSE, alphaPopupCloseHandler);
			}
			
			[Bindable] private var clickDel:int;
			public function alertDelete():void{
				clickDel = dgToolString.selectedItem.toolstringNo;
				Alert.show("Are you sure?", "Confirm Delete", Alert.YES | Alert.NO, this, clickDelete, null, Alert.YES);
			}
			
			protected function clickDelete(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					deleteField_toolstringResult.token = fieldtoolstringService.deleteField_toolstring(clickDel);
				}
			}
			
			private function alphaPopupCloseHandler(e:CloseEvent):void{
				getAllField_toolstringAdvancedByServiceIDResult.token = fieldtoolstringService.getAllField_toolstringAdvancedByServiceID(serviceVO.serviceID);
			}
			protected function deleteField_toolstringResult_resultHandler(event:ResultEvent):void{
				getAllField_toolstringAdvancedByServiceIDResult.token = fieldtoolstringService.getAllField_toolstringAdvancedByServiceID(serviceVO.serviceID);
			}
	
			public function alertSensor():void{
				var ttwdSensor:_sensorViewUsed = new _sensorViewUsed();
				ttwdSensor.prepareview(ManagementViewConst.MODE_EDIT,null,dgToolString.selectedItem as AlltoolstringAdvanced);
				PopUpManager.addPopUp(ttwdSensor,this,true);
				PopUpManager.centerPopUp(ttwdSensor);
			}

		
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
		<fieldtoolstringservice:FieldtoolstringService id="fieldtoolstringService"
													   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
													   showBusyCursor="true"/>
		<s:CallResponder id="getAllField_toolstringAdvancedByServiceIDResult" result="getAllField_toolstringAdvancedByServiceIDResult_resultHandler(event)"/>
		
		<fieldinfoserviceservice:FieldinfoserviceService id="fieldinfoserviceService"
														 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
														 showBusyCursor="true"/>
		<s:CallResponder id="createField_infoserviceResult" result="infoserviceResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_infoserviceResult" result="infoserviceResult_resultHandler(event)"/>
		<s:CallResponder id="deleteField_toolstringResult" result="deleteField_toolstringResult_resultHandler(event)"/>

		
	
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:BorderContainer left="5" right="5" top="5" bottom="5" borderVisible="false" cornerRadius="5">
		<s:Label left="10" top="5" height="20" fontSize="11" fontStyle="italic" fontWeight="bold"
				 text="Services Infomation" textAlign="left" verticalAlign="middle"/>
		<mx:HRule left="10" top="27" width="125"/>
		<s:HGroup left="10" right="10" top="50" gap="20">
			<s:VGroup gap="20">
				<s:Label width="50" height="25" color="#FF0000" fontFamily="Arial" fontSize="10"
						 fontWeight="bold" text="* Name :" textAlign="right" verticalAlign="middle"/>
			</s:VGroup>
			<s:VGroup gap="30">
				<s:HGroup gap="20">
					<s:TextInput id="txtName" width="420" height="25" borderColor="#23AAE2"
								 borderVisible="true" change="changeHandler()" text="{serviceVO.service_name}"/>
					<s:CheckBox id="chkActive" width="50" height="25" label="Active"
								change="changeHandler()" fontSize="10" fontWeight="normal"
								selected="{serviceVO.service_active === '1'}"/>
				</s:HGroup>
			</s:VGroup>
			
		</s:HGroup>
		<mx:LinkButton id="lbtnSave" right="10" top="5" width="35" height="20"
					   click="lbtnSave_clickHandler(event)" color="#000000"
					   enabled="{checkSave === false}" focusColor="#70B2EE" fontWeight="bold"
					   icon="@Embed(source='../images/save_before.png')" paddingLeft="0"
					   paddingRight="0" toolTip="Click to Save"/>
		<mx:LinkButton id="lbtnSaved" visible="{checkSave === true}" right="10" top="5" width="35"
					   height="20" color="#000000" focusColor="#A2CBEA" fontSize="11"
					   fontWeight="bold" icon="@Embed(source='../images/save_after.png')"
					   paddingLeft="5" paddingRight="5" rollOverColor="#A2CBEA"
					   selectionColor="#A2CBEA" toolTip="Saved"/>
		<s:Panel left="10" right="10" top="90" height="200" borderVisible="false"
				 chromeColor="#23AAE2" dropShadowVisible="false">
			<mx:LinkButton id="lbtnAddTools" left="10" top="-26" height="20"
						   label="Add New Tool to Tool String " click="lbtnAddTools_clickHandler(event)"
						   color="#000000" fontSize="10" fontStyle="italic" fontWeight="bold"
						   icon="@Embed(source='../images/add1.png')" paddingLeft="5"
						   paddingRight="5" toolTip="start synchronization"/>
			<mx:DataGrid id="dgToolString" left="0" right="0" top="0" bottom="0" borderVisible="false"
						 chromeColor="#23AAE2" dataProvider="{arrToolString}" fontFamily="Arial" fontSize="10"
						 fontWeight="normal" variableRowHeight="true"
						 verticalGridLineColor="0xFFFFFF">
				<mx:columns>
					<mx:DataGridColumn width="50" dataField="" headerText="" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox horizontalAlign="center" verticalAlign="top">
										<mx:LinkButton icon="@Embed(source='../images/delete.png')" width="16" height="16"
													   toolTip="Click to delete" click="outerDocument.alertDelete()"/>
										<mx:LinkButton id="btnGridEdit" icon="@Embed(source='../images/modify12.png')"  width="16" height="16"
													   toolTip="Click to edit" click="outerDocument.alertEdit()"/>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn width="200" dataField="tool_name" headerText="Tool Name" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold"/>
					<mx:DataGridColumn width="100" dataField="toolString_serialNo" headerText="S/N" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
					<mx:DataGridColumn width="50" dataField="sensor" headerText="Sensor" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox horizontalAlign="center" verticalAlign="top">
									<mx:Canvas>
										<mx:LinkButton icon="@Embed(source='../images/system_monitor.png')" width="16" height="16"
													   toolTip="Click to view" click="outerDocument.alertSensor();"/>
									</mx:Canvas>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn dataField="toolString_note" headerText="Note" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold"/>
				</mx:columns>
			</mx:DataGrid>
		</s:Panel>
		<s:HGroup left="10" right="10" top="300" gap="20">
			<s:VGroup gap="20">
				<s:Label width="50" height="25" fontFamily="Arial" fontSize="10" text="Note :"
						 textAlign="right" verticalAlign="middle"/>
			</s:VGroup>
			<s:VGroup gap="20">
				<s:HGroup>
					<s:TextArea id="txtNote" width="420" height="100" borderColor="#23AAE2"
								borderVisible="true" change="changeHandler()"
								text="{serviceVO.service_note}" textAlign="left"/>
				</s:HGroup>
			</s:VGroup>
			
		</s:HGroup>
	</s:BorderContainer>
	
</s:TitleWindow>
