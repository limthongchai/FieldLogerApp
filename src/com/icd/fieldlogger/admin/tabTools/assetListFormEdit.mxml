<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:fieldinfoassetservice="services.fieldinfoassetservice.*"
			   xmlns:fieldreportreferenceservice="services.fieldreportreferenceservice.*"
			   xmlns:fieldinfotoollistservice="services.fieldinfotoollistservice.*"
			   xmlns:fieldinfosensorservice="services.fieldinfosensorservice.*"
			   xmlns:fieldinfoassetsensorservice="services.fieldinfoassetsensorservice.*"
			   width="1000" height="750" backgroundColor="#23AAE2" borderVisible="false"
			   close="closeHandler(event)" fontSize="11"
			   implements="icd.mgmtview.api.IManagementView" resize="onApplicationResize(event)"
			   title="{titleName}">
	<fx:Script>
		<![CDATA[
			import com.icd.fieldlogger.admin.tabSensor.sensorActiveCheckbox;
			
			import icd.mgmtview.api.constant.ManagementViewConst;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import spark.events.DropDownEvent;
			
			import valueObjects.Allinfo_asset;
			import valueObjects.Allinfo_assetAdvanced;
			import valueObjects.Allinfo_asset_sensor;
			import valueObjects.Allinfo_toollist;
			import valueObjects.Allreport_reference;

			[Bindable] private var MODE:int;
			[Bindable] private var titleName:String;
			[Bindable] private var checkSave:Boolean = true;
			[Bindable] public static var assetVO:Allinfo_assetAdvanced = new Allinfo_assetAdvanced();
			
			public function onApplicationResize(event:Event):void{
				this.height = parentApplication.height;
				this.width  = parentApplication.width;
			}
			protected function changeHandler():void{
				checkSave = false;
			}
			
			/////*** Check Close TitleWindow ***/////
			protected function closeHandler(event:CloseEvent):void{
				if(checkSave === true){
					PopUpManager.removePopUp(this);
				}else{
					Alert.show("Click Yes to save your changes", "Please confirm",Alert.YES | Alert.NO, this, AlertSaveClosed, null, Alert.YES);	
				}
			}
			protected function AlertSaveClosed(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					if(ddlToolname.selectedIndex !== -1 && txtSerialNo.text !== ""){
						prepareSave();
					}if(ddlToolname.selectedIndex === -1){
						Alert.show('Please select Tool Name.','Fields with Asterisk (*)');
					}if(txtSerialNo.text === ""){
						Alert.show('Please insert Serial Number Detail.','Fields with Asterisk (*)');
					}	
				}else if(eventObj.detail===Alert.NO) {
					PopUpManager.removePopUp(this);
				}
			}
			
			/////*** PrepareView AssetVO ***/////
			public function prepareview(mode:int, titleName:String, objVO:Object=null):void{
				this.title = titleName;
				this.MODE = mode;
				
				if(this.MODE === ManagementViewConst.MODE_ADD){
					assetVO							= new Allinfo_assetAdvanced();
					assetVO.assetID					= "AS" + new Date().valueOf().toString();
					assetVO.asset_active			= "1";
				}else if(this.MODE === ManagementViewConst.MODE_EDIT){
					assetVO = objVO as Allinfo_assetAdvanced;
				}
				
				getAllasset_statusResult.token = fieldinfoassetService.getAllasset_status();
				getAllasset_locatedResult.token = fieldinfoassetService.getAllasset_located();
				getAllField_infotoollistActiveResult.token = fieldinfotoollistService.getAllField_infotoollistActive();
				getField_referenceByprojectIDResult.token = fieldreportreferenceService.getField_referenceByreportID(assetVO.assetID);
				getField_infosensorByToolIDResult.token = fieldinfosensorService.getField_infosensorByToolID(assetVO.asset_toolID);
				getAllfield_infoasset_sensorByassetIDResult.token = fieldinfoassetsensorService.getAllfield_infoasset_sensorByassetID(assetVO.assetID);
			}
			
			/////*** Get Asset Sensor ***/////
			[Bindable] public static var arrAssetSensor:ArrayCollection = new ArrayCollection();
			protected function getAllfield_infoasset_sensorByassetIDResult_resultHandler(event:ResultEvent):void{
				arrAssetSensor = event.result as ArrayCollection;
			}
			protected function infoasset_sensorResult_resultHandler(event:ResultEvent):void{
				getAllfield_infoasset_sensorByassetIDResult.token = fieldinfoassetsensorService.getAllfield_infoasset_sensorByassetID(assetVO.assetID);
			}
			[Bindable] public static var arrSensor:ArrayCollection = new ArrayCollection(); 
			protected function getField_infosensorByToolIDResult_resultHandler(event:ResultEvent):void{
				arrSensor = event.result as ArrayCollection;
				dgSensor.dataProvider = arrSensor;
				ddlToolname.enabled = true;
			}
			protected function getField_infosensorByToolIDResult2_resultHandler(event:ResultEvent):void{
				arrSensor = event.result as ArrayCollection;
				ddlToolname.enabled = true;
			
				for(var i:int = 0; i<arrSensor.length; i++){
					trace(i);
					var createSensor:Allinfo_asset_sensor	 	= new Allinfo_asset_sensor();
					createSensor.ts_sensorID					= arrSensor[i].sensorID;
					createSensor.ts_assetID	 					= assetVO.assetID;
					createfield_infoasset_sensorResult.token = fieldinfoassetsensorService.createfield_infoasset_sensor(createSensor);
				}
				
				dgSensor.dataProvider = arrSensor;
			}
			
			/////*** Get ToolName ***/////
			[Bindable] private var arrToollist:ArrayCollection = new ArrayCollection();
			protected function getAllField_infotoollistActiveResult_resultHandler(event:ResultEvent):void{
				arrToollist = event.result as ArrayCollection;
				if(assetVO.asset_toolID !== '') {
					setAsset();
				}
			}
			private function setAsset():void{
				for each (var getAsset:Allinfo_toollist in arrToollist) {
					if(getAsset.toolID === assetVO.asset_toolID){
						ddlToolname.selectedItem = getAsset;
						break;
					}
				}
			}
			
			/////*** DropDrow Select Tool ***/////
			 protected function ddlToolname_closeHandler(event:DropDownEvent):void{
				if(arrAssetSensor.length > 0){
					Alert.show('Do you want to Change this Asset Tool ?', 'Confirm Clear Sensor List', Alert.YES | Alert.NO, this, AlertDeleteSensor, null, Alert.YES);
				}else{ 
					assetVO.asset_toolID = ddlToolname.selectedItem.toolID;
					getField_infosensorByToolIDResult2.token = fieldinfosensorService.getField_infosensorByToolID(ddlToolname.selectedItem.toolID);
				} 
			}
			protected function AlertDeleteSensor(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					assetVO.asset_toolID = ddlToolname.selectedItem.toolID;
					getField_infosensorByToolIDResult2.token = fieldinfosensorService.getField_infosensorByToolID(assetVO.asset_toolID);
					deletefield_infoasset_sensorByassetIDResult.token = fieldinfoassetsensorService.deletefield_infoasset_sensorByassetID(assetVO.assetID);
				}else if(eventObj.detail==Alert.NO){
					for each (var getAsset:Allinfo_toollist in arrToollist) {
						if(getAsset.toolID === assetVO.asset_toolID){
							ddlToolname.selectedItem = getAsset;
							break;
						}
					}
				}
			}
			protected function deletefield_infoasset_sensorByassetIDResult_resultHandler(event:ResultEvent):void{
				getField_infosensorByToolIDResult.token = fieldinfosensorService.getField_infosensorByToolID(assetVO.asset_toolID);
				getAllfield_infoasset_sensorByassetIDResult.token = fieldinfoassetsensorService.getAllfield_infoasset_sensorByassetID(assetVO.assetID);
			} 
			
			
			
			/////*** Save Asset ***/////
			protected function lbtnSave_clickHandler(event:MouseEvent):void{
				if(ddlToolname.selectedIndex !== -1 && txtSerialNo.text !== ""){
					Alert.show('Please confirm!', 'Confirm Save', Alert.YES | Alert.NO, this, AlerSave, null, Alert.YES);
				}if(ddlToolname.selectedIndex === -1){
					Alert.show('Please select "Name"','Fields with Asterisk (*)');
				}if(txtSerialNo.text === ""){
					Alert.show('Please insert "S/N" (Serial Number)','Fields with Asterisk (*)');
				}
			}
			protected function AlerSave(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					prepareSave();
				}
			}
			protected function prepareSave():void{
				var updateAsset:Allinfo_asset		= new Allinfo_asset();
				updateAsset.assetNo					= assetVO.assetNo;
				updateAsset.assetID					= assetVO.assetID;
				updateAsset.asset_toolID			= assetVO.asset_toolID;// "*"
				updateAsset.asset_serialNo  		= txtSerialNo.text;// "*"
				updateAsset.asset_status 			= cboStatus.textInput.text;
				updateAsset.asset_located 			= cboLocated.textInput.text;
				updateAsset.asset_note				= txtNote.text;
				updateAsset.asset_ref				= checkRef;
				updateAsset.asset_active			= chkActive.selected? "1":"0";
				if(this.MODE === ManagementViewConst.MODE_ADD){
					createField_infoassetResult.token = fieldinfoassetService.createField_infoasset(updateAsset);
				}else if(this.MODE === ManagementViewConst.MODE_EDIT){
					updateField_infoassetResult.token = fieldinfoassetService.updateField_infoasset(updateAsset);
				}
			}
			protected function infoassetResult_resultHandler(event:ResultEvent):void{
				checkSave = true;
				this.closeButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			}
			
			
			
			/////*** Get Reference ***/////
			[Bindable] private var arrRef:ArrayCollection = new ArrayCollection();
			[Bindable] private var checkRef:String = "0";
			protected function getField_referenceByprojectIDResult_resultHandler(event:ResultEvent):void{
				arrRef = event.result as ArrayCollection;
				if(arrRef.length > 0){
					checkRef = "1";
				}else{
					checkRef = "0";
				}
			}
			
			/////*** Upload Reference ***/////
			[Bindable] private var auditRef:FileFilter = new FileFilter("All Files (*.*)","*.*;");
			[Bindable] private var FilerefFile:FileReference = new FileReference();
			[Bindable] private var uploadfile:Array = new Array(auditRef);
			[Bindable] private var fileass:ByteArray = new ByteArray();
			[Bindable] private var fileSize:String = new String();
			
			private function formatFileSize(numSize:Number):String {
				var strReturn:String;
				numSize = Number(numSize / 1024);
				strReturn = String(numSize.toFixed(1) + " KB");
				if (numSize > 1024) {
					numSize = numSize / 1024;
					strReturn = String(numSize.toFixed(1) + " MB");
					if (numSize > 1024) {
						numSize = numSize / 1024;
						strReturn = String(numSize.toFixed(1) + " GB");
					}
				}
				return strReturn;
			}
			[Bindable] private var status:int;
			protected function lbtnAddRef_clickHandler(event:MouseEvent,mode:int):void{
				status = mode;
				FilerefFile.addEventListener(Event.SELECT, inspecFile_Select);
				FilerefFile.addEventListener(Event.COMPLETE, inspecPreviewFileHandler);
				FilerefFile.browse(uploadfile);
			}
			public function alertEdit(mode:int):void{
				dgSelectedNo = dgReference.selectedItem.refNo;
				dgSelectedID = dgReference.selectedItem.refID;
				dgSelectedFile = dgReference.selectedItem.ref_name;
				status = mode;
				FilerefFile.addEventListener(Event.SELECT, inspecFile_Select);
				FilerefFile.addEventListener(Event.COMPLETE, inspecPreviewFileHandler);
				FilerefFile.browse(uploadfile);
			}
			private function inspecFile_Select(e:Event) : void {
				FilerefFile.load();
			}
			private function inspecPreviewFileHandler(e:Event) : void {
				var loader:Loader = new Loader();
				//loader.loadBytes(FilerefFile.data);
				txtfileName.text = FilerefFile.name;//picdri field
				fileass = FilerefFile.data;
				fileSize = formatFileSize(FilerefFile.size);
				gotoSaveFile(status);
			}
			protected function gotoSaveFile(mode:int):void{
				if(mode === 1){
					var createReference:Allreport_reference 	= new Allreport_reference();
					createReference.refID						= "REF" + new Date().valueOf().toString();
					createReference.reportID					= assetVO.assetID;
					createReference.ref_name					= txtfileName.text;
					createReference.ref_by						= "";
					createReference.ref_note					= "";
					createReference.ref_eventDate				= dtf.format(new Date());
					createField_referencePicResult.token 		= fieldreportreferenceService.createField_referencePic(createReference, fileass);
				}if(mode === 2){
					var updateReference:Allreport_reference 	= new Allreport_reference();
					updateReference.refNo						= dgSelectedNo;
					updateReference.refID						= dgSelectedID;
					updateReference.ref_name	    			= txtfileName.text;
					updateReference.ref_eventDate				= dtf.format(new Date());
					updateReference.ref_1						= dgSelectedFile;
					updateField_referencePicResult.token = fieldreportreferenceService.updateField_referencePic(updateReference, fileass);
				}
			}
			
		
			/////*** Edit Reference ***/////
			protected function dgReference_itemEditEndHandler(event:DataGridEvent):void{
				checkSave = false;
				var updateRef:Allreport_reference = new Allreport_reference();
				if(event.dataField === 'ref_by'){
					event.preventDefault();
					updateRef.ref_by =  (dgReference.itemEditorInstance as mx.controls.TextInput).text;
					updateRef.refNo = dgReference.selectedItem.refNo;
					dgReference.destroyItemEditor();
					updateField_referenceEditorColumnResult.token = fieldreportreferenceService.updateField_referenceEditorColumn(updateRef, "ref_by");
				}
				if(event.dataField === 'ref_note'){
					event.preventDefault();
					updateRef.ref_note =  (dgReference.itemEditorInstance as mx.controls.TextInput).text;
					updateRef.refNo = dgReference.selectedItem.refNo;
					dgReference.destroyItemEditor();
					updateField_referenceEditorColumnResult.token = fieldreportreferenceService.updateField_referenceEditorColumn(updateRef, "ref_note");
				}
			}
			
			/////*** Delecte Reference ***/////
			[Bindable] private var dgSelectedNo:int;
			[Bindable] private var dgSelectedID:String;
			[Bindable] private var dgSelectedFile:String;
			public function alertDeleteRef():void{
				checkSave = false;
				dgSelectedNo = dgReference.selectedItem.refNo;
				dgSelectedFile = dgReference.selectedItem.ref_name;
				Alert.show("Are you sure?", "Confirm Delete", Alert.YES | Alert.NO, this, deleteReference, null, Alert.YES);
			}
			protected function deleteReference(eventObj:CloseEvent):void {
				if(eventObj.detail==Alert.YES) {
					deleteField_referenceResult.token = fieldreportreferenceService.deleteField_reference(dgSelectedNo,dgSelectedFile);
				}
			}
			
			/////*** View Reference ***/////
			public function alertView():void{
				var urlReq:URLRequest = new URLRequest();
				urlReq = new URLRequest('../fieldlogger/upload_documents/' + dgReference.selectedItem.ref_name);
				navigateToURL(urlReq, "_blank");
			}
			
			/////*** Refresh Update Reference ***/////
			protected function referencePicResult_resultHandler(event:ResultEvent):void{
				getField_referenceByprojectIDResult.token = fieldreportreferenceService.getField_referenceByreportID(assetVO.assetID);
			}

			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:DateFormatter id="dtf" formatString="YYYY-MM-DD"/>
		
		<!--info Reference-->
		<fieldreportreferenceservice:FieldreportreferenceService id="fieldreportreferenceService"
																 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																 showBusyCursor="true"/>
		<s:CallResponder id="getField_referenceByprojectIDResult" 		result="getField_referenceByprojectIDResult_resultHandler(event)"/>
		<s:CallResponder id="createField_referencePicResult" 			result="referencePicResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_referencePicResult" 			result="referencePicResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_referenceEditorColumnResult" 	result="referencePicResult_resultHandler(event)"/>
		<s:CallResponder id="deleteField_referenceResult" 				result="referencePicResult_resultHandler(event)"/>
		
		<!--info Sensor-->
		<fieldinfosensorservice:FieldinfosensorService id="fieldinfosensorService"
													   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
													   showBusyCursor="true"/>
		<s:CallResponder id="getField_infosensorByToolIDResult" 		result="getField_infosensorByToolIDResult_resultHandler(event)"/>
		<s:CallResponder id="getField_infosensorByToolIDResult2" 		result="getField_infosensorByToolIDResult2_resultHandler(event)"/>
		
		<!--info Asset-->
		<fieldinfoassetservice:FieldinfoassetService id="fieldinfoassetService"
													 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
													 showBusyCursor="true"/>
		<s:CallResponder id="createField_infoassetResult" 				result="infoassetResult_resultHandler(event)"/>
		<s:CallResponder id="updateField_infoassetResult" 				result="infoassetResult_resultHandler(event)"/>
		
		

		<!--info Tool-->
		<fieldinfotoollistservice:FieldinfotoollistService id="fieldinfotoollistService"
														   fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
														   showBusyCursor="true"/>
		<s:CallResponder id="getAllField_infotoollistActiveResult" 		result="getAllField_infotoollistActiveResult_resultHandler(event)"/>
		<s:CallResponder id="getAllField_infoassetAdvancedResult"/>
		<s:CallResponder id="getAllasset_statusResult"/>
		<s:CallResponder id="getAllasset_locatedResult"/>
	
		<!--info AssetSensor -->
		<fieldinfoassetsensorservice:FieldinfoassetsensorService id="fieldinfoassetsensorService"
																 fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
																 showBusyCursor="true"/>
		<s:CallResponder id="getAllfield_infoasset_sensorByassetIDResult" result="getAllfield_infoasset_sensorByassetIDResult_resultHandler(event)"/>
		<s:CallResponder id="createfield_infoasset_sensorResult" 		  result="infoasset_sensorResult_resultHandler(event)"/>
		<s:CallResponder id="deletefield_infoasset_sensorByassetIDResult" result="deletefield_infoasset_sensorByassetIDResult_resultHandler(event)"/>
		

	</fx:Declarations>
	
	<s:BorderContainer left="5" right="5" top="5" bottom="5" borderVisible="false" cornerRadius="5">
		<s:Label left="10" top="5" height="20" fontSize="11" fontStyle="italic" fontWeight="bold"
				 text="Asset Infomation" textAlign="left" verticalAlign="middle"/>
		<mx:HRule left="10" top="27" width="120"/>
		<s:HGroup left="10" right="10" top="40" gap="10">
			<s:VGroup width="5%" gap="15">
				<s:Label width="50" height="25" color="#FF0000" fontFamily="Arial" fontSize="10"
						 fontWeight="bold" text="* Name :" textAlign="right" verticalAlign="middle"/>
				<s:Label width="50" height="25" color="#FF0000" fontFamily="Arial" fontSize="10"
						 fontWeight="bold" text="* S/N :" textAlign="right" verticalAlign="middle"/>
				<s:Label width="50" height="25" fontFamily="Arial" fontSize="10" fontWeight="normal"
						 text="Status :" textAlign="right" verticalAlign="middle"/>
				<s:Label width="50" height="25" fontFamily="Arial" fontSize="10" fontWeight="normal"
						 text="Located :" textAlign="right" verticalAlign="middle"/>
				<s:Label width="50" height="25" fontFamily="Arial" fontSize="10" fontWeight="normal"
						 text="Note :" textAlign="right" verticalAlign="middle"/>
			</s:VGroup>
			<s:VGroup width="40%" gap="15">
				<s:HGroup width="100%" gap="10">
					<s:DropDownList id="ddlToolname" width="100%" height="25" borderColor="#23AAE2"
									borderVisible="true" change="changeHandler()"
									dataProvider="{arrToollist}" labelField="tool_name"
									close="ddlToolname_closeHandler(event)"
									toolTip="Please select Tool Name" enabled="false"/>
					<s:CheckBox id="chkActive" height="25" label="Active" change="changeHandler()"
								fontSize="10" selected="{assetVO.asset_active === '1'}"/>
				</s:HGroup>
				<s:TextInput id="txtSerialNo" width="100%" height="25" borderColor="#23AAE2"
							 borderVisible="true" change="changeHandler()" text="{assetVO.asset_serialNo}"/>
				<s:ComboBox id="cboStatus" width="100%" height="25" change="changeHandler()"
							labelField="asset_status" selectedItem="{assetVO.asset_status}"
							toolTip="Please enter or select Status">
					<s:AsyncListView list="{getAllasset_statusResult.lastResult}"/>
				</s:ComboBox>
				<s:ComboBox id="cboLocated" width="100%" height="25" change="changeHandler()"
							labelField="asset_located" selectedItem="{assetVO.asset_located}"
							toolTip="Please enter or select Located">
					<s:AsyncListView list="{getAllasset_locatedResult.lastResult}"/>
				</s:ComboBox>
				<s:TextArea id="txtNote" width="100%" height="110" borderColor="#23AAE2"
							borderVisible="true" change="changeHandler()" text="{assetVO.asset_note}"/>
			</s:VGroup>
			<mx:DataGrid id="dgSensor" left="5" right="5" top="180" bottom="10" width="55%"
						 height="100%" borderVisible="false" chromeColor="#23AAE2"
						 fontFamily="Arial" fontSize="10"
						 fontWeight="normal" variableRowHeight="true"
						 verticalGridLineColor="0xFFFFFF">
				<mx:columns>
					<mx:DataGridColumn headerText="Active" width="50" sortable="false" editable="false"
									   headerStyleName="centerBold"
									   itemRenderer="com.icd.fieldlogger.admin.tabSensor.sensorActiveCheckbox"/>
					<mx:DataGridColumn width="50" dataField="" headerText="Color" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold"
									   itemRenderer="com.icd.fieldlogger.admin.tabSensor.sensorColorPicker"/>
					<mx:DataGridColumn dataField="sensor_name" headerText="Sensor Name" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold"/>
					<mx:DataGridColumn width="80" dataField="sensor_unit" headerText="Unit" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
					<mx:DataGridColumn width="80" dataField="sensor_gain_a" headerText="a" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
					<mx:DataGridColumn width="80" dataField="sensor_offset_b" headerText="b" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
					<mx:DataGridColumn width="80" dataField="sensor_min" headerText="Min" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
					<mx:DataGridColumn width="80" dataField="sensor_max" headerText="Max" editable="false" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
				</mx:columns>
			</mx:DataGrid>
		</s:HGroup>
		<mx:LinkButton id="lbtnSave" right="10" top="5" width="35" height="20"
					   click="lbtnSave_clickHandler(event)" color="#000000"
					   enabled="{checkSave === false}" focusColor="#70B2EE" fontWeight="bold"
					   icon="@Embed(source='../images/save_before.png')" paddingLeft="0"
					   paddingRight="0" toolTip="Click to Save"/>
		<mx:LinkButton id="lbtnSaved" visible="{checkSave === true}" right="10" top="5" width="35"
					   height="20" color="#000000" focusColor="#A2CBEA" fontSize="11"
					   fontWeight="bold" icon="@Embed(source='../images/save_after.png')"
					   paddingLeft="5" paddingRight="5" rollOverColor="#A2CBEA"
					   selectionColor="#A2CBEA" toolTip="Saved"/>
		<s:Panel left="5" right="5" top="320" bottom="5" borderVisible="false"
				 chromeColor="#23AAE2" dropShadowVisible="false">
			<s:TextInput id="txtfileName" visible="false" x="20" y="2" borderColor="#FFFFFF"
						 paddingTop="7" textAlign="center"/>
			<mx:LinkButton id="lbtnAddRef" left="10" top="-26" height="20" label="Add New Reference"
						   click="lbtnAddRef_clickHandler(event,1); changeHandler()" color="#000000"
						   fontSize="10" fontStyle="italic" fontWeight="bold"
						   icon="@Embed(source='../images/add1.png')" paddingLeft="5"
						   paddingRight="5" toolTip="start synchronization"/>
			<mx:DataGrid id="dgReference" left="1" right="1" top="0" bottom="0" borderVisible="false"
						 chromeColor="#23AAE2" dataProvider="{arrRef}" fontFamily="Arial" fontSize="10"
						 fontWeight="normal" variableRowHeight="true" itemEditEnd="dgReference_itemEditEndHandler(event)"
						 verticalGridLineColor="0xFFFFFF" editable="true">
				<mx:columns>
					<mx:DataGridColumn width="50" dataField="" headerText="" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold" editable="false">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox horizontalAlign="center" verticalAlign="top">
									<mx:LinkButton icon="@Embed(source='../images/delete.png')"  width="16" height="16"
												   toolTip="Click to delete" click="outerDocument.alertDeleteRef()"/>
									<mx:LinkButton id="btnGridEdit" icon="@Embed(source='../images/modify12.png')"  width="16" height="16"
												   toolTip="Click to edit" click="outerDocument.alertEdit(2)"/>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn width="50" dataField="" headerText="Ref" textAlign="center"
									   wordWrap="true" headerStyleName="centerBold" editable="false">
						<mx:itemRenderer>
							<fx:Component>
								<mx:HBox horizontalAlign="center" verticalAlign="top">
									<mx:Canvas>
										<mx:LinkButton icon="@Embed(source='../images/attach.png')" width="16" height="16"
													   toolTip="Click to view" 
													   click="outerDocument.alertView()"/>
									</mx:Canvas>
								</mx:HBox>
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn width="250" dataField="ref_name" headerText="File Name" textAlign="left"
									   wordWrap="true" headerStyleName="centerBold"/>
					<mx:DataGridColumn width="150" dataField="ref_by" headerText="By" textAlign="center"
									   headerStyleName="centerBold" wordWrap="true"/>
					<mx:DataGridColumn dataField="ref_note" headerText="Note" textAlign="left"
									   wordWrap="true" headerStyleName="centerBold"/>
				</mx:columns>
			</mx:DataGrid>
		</s:Panel>
	</s:BorderContainer>
	
</s:TitleWindow>
